{"version":3,"sources":["json.js"],"names":[],"mappings":";;;;;;AAEA;;AACA;;;;AACA;;;;;;;;;;;;;;;;wDAQe,iBAAO,GAAP;AAAA,yEAAgC,EAAhC;;AAAA,8BAAc,KAAd;AAAA,YAAc,KAAd,8BAAsB,KAAtB;AAAA,YACL,IADK,EAMD,MANC,EAOH,QAPG,EAQH,MARG;AAAA;AAAA;AAAA;AAAA;AACL,4BADK,GACE,IAAI,OAAJ,CAAY,cAAZ,CADF;;AAAA,4BAEN,OAAO,IAAP,CAAY,IAAZ,CAFM;AAAA;AAAA;AAAA;;AAAA,yDAGA,IAHA;;AAAA;AAAA;AAMD,8BANC,GAMQ,IAAI,OAAJ,CAAY,gBAAZ,CANR;AAOH,gCAPG,GAOQ,qBAAM,KAAN,CAAY,IAAZ,EAAkB,UAAlB,CAA6B,OAPrC;AAAA;AAAA,+BAQY,uBAAW,GAAX,EAAgB,EAAE,YAAF,EAAS,cAAT,EAAiB,kBAAjB,EAAhB,CARZ;;AAAA;AAQH,8BARG;AAAA;AAAA,yDAUI,KAAK,KAAL,CAAW,MAAX,CAVJ;;AAAA;AAAA;AAAA;AAAA,8BAYG,qBAAc,qBAAd,EAAqC,GAArC,EAA0C,KAA1C,cAZH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,8BAeH,YAAI,IAAJ,KAAa,kBAfV;AAAA;AAAA;AAAA;;AAAA,8BAgBG,wCAA+B,KAA/B,aAA8C,GAA9C,EAAmD,KAAnD,cAhBH;;AAAA;AAAA,8BAkBG,qBAAc,cAAd,EAA8B,GAA9B,EAAmC,KAAnC,cAlBH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K","file":"json.js","sourcesContent":["/** @module Json */\n\nimport { HttpError } from './error';\nimport getRawBody from 'raw-body';\nimport typer from 'media-typer';\n\n/**\n * Parses json request's body\n *\n * @param {http.IncomingMessage} req - Request message\n * @param {Object} options\n */\nexport default async (req, { limit = '1mb' } = {}) => {\n    const type = req.headers['content-type'];\n    if (!/json/.test(type)) {\n        return null;\n    }\n    try {\n        const length = req.headers['content-length'],\n            encoding = typer.parse(type).parameters.charset,\n            string = await getRawBody(req, { limit, length, encoding });\n        try {\n            return JSON.parse(string);\n        } catch (err) {\n            throw new HttpError('Invalid JSON string', 400, 40001, err);\n        }\n    } catch (err) {\n        if (err.type === 'entity.too.large') {\n            throw new HttpError(`Body exceeded ${limit} limit`, 413, 40013, err);\n        } else {\n            throw new HttpError('Invalid body', 400, 40001, err);\n        }\n    }\n};\n"],"sourceRoot":"/Users/diorahman/Experiments/hooq/src/luigi/micro-core/lib"}